import os
import sys
import numpy as np
import pybie2d_speed_tests as ST
from pybie2d_speed_tests.laplace_kernel.lk_numpy import lk_numpy
from pybie2d_speed_tests.laplace_kernel.lk_numexpr import lk_numexpr
from pybie2d_speed_tests.laplace_kernel.lk_numba import lk_numba1
from pybie2d_speed_tests.laplace_kernel.lk_numba import lk_numba2
from pybie2d_speed_tests.laplace_kernel.lk_fortran import lk_fortran_serial
from pybie2d_speed_tests.laplace_kernel.lk_fortran import lk_fortran_parallel

"""
Rigorous speed test of different kernel code for computing the Laplace greens
kernel in 2 dimensions
"""

base_function  = lk_numpy
# Test Setup goes here:
source_numbers = [100, 1000, 10000, 100,      int(1e6) ]
target_numbers = [100, 1000, 10000, int(1e6), 100      ]
test_functions = [lk_numexpr, lk_numba1, lk_numba2, lk_fortran_serial, lk_fortran_parallel]
test_names     = ['Numexpr',  'Numba 1', 'Numba 2', 'Fortran S',       'Fortran P'        ]

print('\n----- 2D Laplace Kernel Source-->Target Timing Tests -----')
sys.stdout.flush()
for N2_ind, (SN, TN) in enumerate(zip(source_numbers, target_numbers)):

    print('\nRunning for', SN, 'source points and', TN, 'target points.')
    sys.stdout.flush()
    source_x = np.random.rand(SN)
    source_y = np.random.rand(SN)
    target_x = np.random.rand(TN)
    target_y = np.random.rand(TN)
    source = np.row_stack([source_x, source_y])
    target = np.row_stack([target_x, target_y])
    tau = np.random.rand(SN)
    sd = np.empty(SN, dtype=float)
    D = np.empty([TN, SN], dtype=float)
    out = np.empty(TN, dtype=float)

    print('\nRunning basic numpy (untimed, for testing solution)')
    sys.stdout.flush()
    result_numpy = base_function(source, target, tau)

    for N1_ind, (test, name) in enumerate(zip(test_functions, test_names)):
        print('--',name,'--')
        sys.stdout.flush()
        result = test(source, target, tau)
        %timeit test(source, target, tau)
        print('All close? ', np.allclose(result_numpy, result))
        sys.stdout.flush()

