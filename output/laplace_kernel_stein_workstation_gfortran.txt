]0;IPython: repos/pybie2d_speed_tests
----- 2D Laplace Kernel Source-->Target Timing Tests -----

Running for 100 source points and 100 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
121 Âµs Â± 2.82 Âµs per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True
-- Numba 1 --
61.5 Âµs Â± 408 ns per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True
-- Numba 2 --
35 Âµs Â± 863 ns per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True
-- Fortran S --
344 Âµs Â± 40.8 ns per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
All close?  True
-- Fortran P --
37.6 Âµs Â± 9.86 Âµs per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True

Running for 1000 source points and 1000 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
1.53 ms Â± 18.8 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
All close?  True
-- Numba 1 --
2.61 ms Â± 30.6 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
All close?  True
-- Numba 2 --
371 Âµs Â± 8.07 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
All close?  True
-- Fortran S --
32.7 ms Â± 364 Âµs per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran P --
3.78 ms Â± 485 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
All close?  True

Running for 10000 source points and 10000 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
153 ms Â± 3.01 ms per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Numba 1 --
216 ms Â± 9.5 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Numba 2 --
27.7 ms Â± 339 Âµs per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran S --
3.25 s Â± 1.02 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Fortran P --
200 ms Â± 5.11 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True

Running for 100 source points and 1000000 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
172 ms Â± 2.53 ms per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Numba 1 --
206 ms Â± 9.26 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Numba 2 --
41.7 ms Â± 2.3 ms per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran S --
3.25 s Â± 733 Âµs per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Fortran P --
253 ms Â± 60.6 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True

Running for 1000000 source points and 100 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
158 ms Â± 2.34 ms per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Numba 1 --
337 ms Â± 17.6 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Numba 2 --
82.4 ms Â± 440 Âµs per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran S --
3.28 s Â± 1.08 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Fortran P --
232 ms Â± 5.22 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
