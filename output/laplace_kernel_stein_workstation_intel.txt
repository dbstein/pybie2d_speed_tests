]0;IPython: repos/pybie2d_speed_tests
----- 2D Laplace Kernel Source-->Target Timing Tests -----

Running for 100 source points and 100 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
136 Âµs Â± 16.7 Âµs per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True
-- Numba 1 --
61.9 Âµs Â± 609 ns per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True
-- Numba 2 --
35 Âµs Â± 892 ns per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True
-- Fortran S --
346 Âµs Â± 3.58 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
All close?  True
-- Fortran P --
67.5 Âµs Â± 64.4 ns per loop (mean Â± std. dev. of 7 runs, 10000 loops each)
All close?  True

Running for 1000 source points and 1000 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
1.66 ms Â± 73.5 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
All close?  True
-- Numba 1 --
2.69 ms Â± 163 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
All close?  True
-- Numba 2 --
367 Âµs Â± 339 ns per loop (mean Â± std. dev. of 7 runs, 1000 loops each)
All close?  True
-- Fortran S --
35.4 ms Â± 20 Âµs per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran P --
2.1 ms Â± 37 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)
All close?  True

Running for 10000 source points and 10000 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
166 ms Â± 6.32 ms per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Numba 1 --
206 ms Â± 8.06 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Numba 2 --
28.3 ms Â± 256 Âµs per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran S --
3.42 s Â± 2.11 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Fortran P --
205 ms Â± 5.28 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True

Running for 100 source points and 1000000 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
185 ms Â± 4.85 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Numba 1 --
215 ms Â± 8.3 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Numba 2 --
32.4 ms Â± 67.7 Âµs per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran S --
3.31 s Â± 746 Âµs per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Fortran P --
205 ms Â± 5.14 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True

Running for 1000000 source points and 100 target points.

Running basic numpy (untimed, for testing solution)
-- Numexpr --
173 ms Â± 8.16 ms per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Numba 1 --
323 ms Â± 3.44 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Numba 2 --
82 ms Â± 341 Âµs per loop (mean Â± std. dev. of 7 runs, 10 loops each)
All close?  True
-- Fortran S --
3.4 s Â± 77.4 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
-- Fortran P --
773 ms Â± 20 ms per loop (mean Â± std. dev. of 7 runs, 1 loop each)
All close?  True
